//
//  HeaderView.swift
//  MBKit
//
//  Created by Franklin Munoz on 2/9/18.
//  Copyright Â© 2018 Magic Box Software Solutions LLC. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

@IBDesignable
open class MBHeaderView : UIView {
    
    @IBInspectable open var title: String?
    
    @IBInspectable open var titleColor: UIColor?
    
    @IBInspectable open var titleShadowColor: UIColor?
    
    @IBInspectable open var titleFontSize: CGFloat = 180
    
    open var titleFont: UIFont?
    
    override open func draw(_ rect: CGRect) {
        let renderer = HeaderViewRenderer(textColor: self.titleColor ?? self.tintColor, shadowColor: self.titleShadowColor)
        renderer.draw(frame: rect, title: self.title ?? "", with: self.titleFont ?? UIFont(name: "MarkerFelt-Thin", size: titleFontSize)!)
    }
}

fileprivate class HeaderViewRenderer : NSObject {
    //// Initializer
    init(textColor: UIColor, shadowColor: UIColor?) {
        self.shadowColor = shadowColor
        self.textColor = textColor
        if let shadowColor = shadowColor {
            shadow = NSShadow(color: shadowColor, offset: CGSize(width: 0, height: 1), blurRadius: 17)
        }
    }
    
    //// Colors
    
    @objc dynamic public var shadowColor: UIColor?
    @objc dynamic public var textColor: UIColor
    
    //// Shadows
    
    @objc dynamic public var shadow: NSShadow?
    
    //// Drawing Methods
    
    @objc dynamic public func draw(frame targetFrame: CGRect, title: String, with font: UIFont, resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1125, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1125, y: resizedFrame.height / 200)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 1125, resizedFrame.height / 200)
        
        
        //// Label Drawing
        let labelRect = CGRect(x: 0, y: 0, width: 1125, height: 200)
        context.saveGState()
        
        if let shadow = shadow {
            context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height:shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        }
        
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .center
        let labelFontAttributes = [
            .font: font,
            .foregroundColor: textColor,
            .paragraphStyle: labelStyle,
            ] as [NSAttributedStringKey: Any]
        
        let labelTextHeight: CGFloat = title.boundingRect(with: CGSize(width: labelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).height
        let labelTextRect: CGRect = CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight)
        context.saveGState()
        context.clip(to: labelRect)
        title.draw(in: labelTextRect, withAttributes: labelFontAttributes)
        context.restoreGState()
        
        ////// Label Text Inner Shadow
        if let shadow = shadow {
            context.saveGState()
            context.clip(to: labelRect)
            context.setShadow(offset: CGSize.zero, blur: 0)
            context.setAlpha((shadow.shadowColor as! UIColor).cgColor.alpha)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let labelOpaqueTextShadow = (shadow.shadowColor as! UIColor).withAlphaComponent(1)
            context.setShadow(offset: CGSize(width:shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: labelOpaqueTextShadow.cgColor)
            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            
            labelOpaqueTextShadow.setFill()
            
            let labelInnerShadowFontAttributes = [
                .font: font,
                .foregroundColor: (shadow.shadowColor as! UIColor),
                .paragraphStyle: labelStyle,
                ] as [NSAttributedStringKey: Any]
            title.draw(in: labelTextRect, withAttributes: labelInnerShadowFontAttributes)
            
            context.endTransparencyLayer()
            context.endTransparencyLayer()
            context.restoreGState()
        }
        
        
        context.restoreGState()
        
        context.restoreGState()
        
    }
    
    
    
    
    @objc(TitleHeaderResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}

